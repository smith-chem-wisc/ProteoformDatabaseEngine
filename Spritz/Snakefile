configfile: "config.yaml"
SPECIES = config["species"]
GENOME_VERSION = config["genome"]
ENSEMBL_VERSION = config["release"]
GENEMODEL_VERSION = GENOME_VERSION + "." + ENSEMBL_VERSION
GENOME_FA = f"data/ensembl/{SPECIES}.{GENOME_VERSION}.dna.primary_assembly.fa"
ENSEMBL_GFF = f"data/ensembl/{SPECIES}.{GENEMODEL_VERSION}.gff3"
TEST_GENOME_FA = f"data/ensembl/202122.fa"
TEST_ENSEMBL_GFF = f"data/ensembl/202122.gff3"
FA=GENOME_FA # for analysis; can also be TEST_GENOME_FA
GFF3=ENSEMBL_GFF # for analysis; can also be TEST_ENSEMBL_GFF
REFSTAR_PREFIX = f"data/ensembl/{SPECIES}.{GENEMODEL_VERSION}RsemStar/RsemStarReference"
REFSTAR_FOLDER = f"data/ensembl/{SPECIES}.{GENEMODEL_VERSION}RsemStar/"
REF_PREFIX = f"data/ensembl/{SPECIES}.{GENEMODEL_VERSION}Rsem/RsemReference"
REF_FOLDER = f"data/ensembl/{SPECIES}.{GENEMODEL_VERSION}Rsem/"
REF = SPECIES + "." + GENOME_VERSION
UNIPROTXML="data/uniprot/" + config["species"] + ".protein.xml.gz" #"data/Homo_sapiens_202022.xml.gz"
UNIPROTFASTA="data/uniprot/" + config["species"] + ".protein.fasta" #"data/Homo_sapiens_202022.xml.gz"

def check_dir():
    docheck = 'analysisDirectory' in config and config["analysisDirectory"] is not None and len(config["analysisDirectory"]) > 0
    return docheck

def output(wildcards):
    outputs = []
    if check_dir():
        if len(config["analyses"]) == 0:
            outputs = expand("{dir}/done" + REF + "." + ENSEMBL_VERSION + ".txt"], dir=config["analysisDirectory"]))
        elif "variant" in config["analyses"] and len(config["analyses"]) == 1:
            outputs = expand(["{dir}/combined.spritz.snpeff.protein.withmods.xml.gz", "{dir}/done" + REF + "." + ENSEMBL_VERSION + ".txt"], dir=config["analysisDirectory"])
        elif "isoform" in config["analyses"] and len(config["analyses"]) == 1:
            outputs = expand("{dir}/combined.spritz.isoform.protein.withmods.xml.gz", dir=config["analysisDirectory"])
        elif "variant" in config["analyses"] and "isoform" in config["analyses"]:
            outputs = expand(["{dir}/combined.spritz.snpeff.protein.withmods.xml.gz",
                "{dir}/combined.spritz.isoformvariants.protein.withmods.xml.gz",
                "{dir}/combined.spritz.isoform.protein.withmods.xml.gz",
                "{dir}/done" + REF + "." + ENSEMBL_VERSION + ".txt"],
                dir=config["analysisDirectory"])
    else:
        if len(config["analyses"]) == 0:
            outputs = ["output/done" + REF + "." + ENSEMBL_VERSION + ".txt"]
        elif "variant" in config["analyses"] and len(config["analyses"]) == 1:
            outputs = ["output/combined.spritz.snpeff.protein.withmods.xml.gz", "output/done" + REF + "." + ENSEMBL_VERSION + ".txt"]
        if "isoform" in config["analyses"] and len(config["analyses"]) == 1:
            outputs = "output/combined.spritz.isoform.protein.withmods.xml.gz"
        elif "variant" in config["analyses"] and "isoform" in config["analyses"]:
            outputs = ["output/combined.spritz.snpeff.protein.withmods.xml.gz",
                "output/combined.spritz.isoformvariants.protein.withmods.xml.gz",
                "output/combined.spritz.isoform.protein.withmods.xml.gz",
                "output/done" + REF + "." + ENSEMBL_VERSION + ".txt"]
    return outputs

rule all:
    input: output

rule clean:
    shell:
        "rm -rf data/ ChromosomeMappings/ SnpEff/ tmp/ fast.tmp/ && "
        "cd GtfSharp && dotnet clean && cd .. && "
        "cd TransferUniProtModifications && dotnet clean && cd .."

include: "rules/downloads.smk"
include: "rules/align.smk"
include: "rules/variants.smk"
include: "rules/isoforms.smk"
include: "rules/proteogenomics.smk"
include: "rules/quant.smk"
include: "rules/fusion.smk"
include: "rules/testing.smk"
